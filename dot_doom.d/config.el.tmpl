;;; $DOOMDIR/config.el -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Nick de Heras"
      user-mail-address "{{ .email }}"
      org-directory (file-truename "~/Documents/org/"))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Source Code Pro" :size 13 :weight 'normal)
      doom-big-font (font-spec :family "Source Code Pro" :size 16)
      doom-variable-pitch-font (font-spec :family "IBM Plex Serif" :size 18)
      ;; doom-unicode-font (font-spec :size 10)
      doom-serif-font (font-spec :family "IBM Plex Serif" :weight 'light))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-vibrant)
;; (setq doom-font (font-spec :family "Source Code Pro" :size 25 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 23))
(after! doom-themes
  (setq doom-themes-treemacs-enable-variable-pitch nil))
;;   (setq doom-themes-enable-bold t
;;         doom-themes-enable-italic t))

;; General stuff
;; Turn off mouse highlighting. Super annoying in agenda and I don't
;; need it anyway.
(setq mouse-highlight nil)

;; Enable modeline for all but minibuffer
;; https://github.com/doomemacs/doomemacs/issues/6209
;; (add-hook 'buffer-list-update-hook (lambda ()
;;                                      (unless (active-minibuffer-window)
;;                                        (setq hide-mode-line-mode nil))))
(advice-add 'hide-mode-line-mode :around (lambda (orig &optional args) nil))

;; Remove all existing file notification watches from Emacs. This
;; happens at some point when I've been running emacs for a while, and
;; moreso when I'm using the dap debugger. S/o Ben Simon:
;; https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html
(defun deheras/file-notify-rm-all-watches ()
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(require 'org)
(require 'org-habit)

(after! org
  (setq org-startup-indented t
        org-log-into-drawer t
        org-blank-before-new-entry '((heading . t) (plain-list-item . 'auto))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        org-log-refile t
        org-refile-allow-creating-parent-nodes 'confirm
        org-log-done 'time
        org-tags-column -80

        org-agenda-files (--map (concat org-directory it) '("gtd/" "inbox/" "bookmarks.org" "runbooks.org" "ideas.org"))
        org-refile-targets '((org-agenda-files :maxlevel . 5))

        org-highest-priority ?A
        org-default-priority ?C
        org-lowest-priority ?D

        org-complete-tags-always-offer-all-agenda-tags t

        org-global-properties '(("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 4:00 8:00 12:00")))

  (defun deheras/org-copy-link (&optional arg)
    "Extract URL from org-mode-link add add to kill ring.
Cribbed from:
https://emacs.stackexchange.com/questions/3981/how-to-copy-links-out-of-org-mode"
    (interactive "P")
    (let* ((link (org-element-lineage (org-element-context) '(link) t))
           (type (org-element-property :type link))
           (url (org-element-property :path link))
           (url (concat type ":" url)))
      (kill-new url)
      (message (concat "Copied URL: " url))))

  (defun deheras/org-agenda-copy-link (&optional arg)
    "Open the link(s) in the current entry, if any.

This looks for a link in the displayed line in the agenda.
It also looks at the text of the entry itself."
    (interactive "P")
    (let* ((marker (or (org-get-at-bol 'org-hd-marker)
                       (org-get-at-bol 'org-marker)))
           (buffer (and marker (marker-buffer marker)))
           (prefix (buffer-substring (line-beginning-position) (line-end-position)))
           (lkall (and buffer (org-offer-links-in-entry
                               buffer marker arg prefix)))
           (lk0 (car lkall))
           (lk (if (stringp lk0) (list lk0) lk0))
           (lkend (cdr lkall))
           (trg (substring-no-properties lk0)))
      trg))

  (defun deheras/org-get-bookmark-title-slug (title)
    "Get bookmark title slug."
    (setq title-regex '(("[^A-Za-z0-9 ]" "") (" +" "_")))
    (downcase (--reduce-from (replace-regexp-in-string (nth 0 it) (nth 1 it) acc) title title-regex)))

  (defun deheras/org-agenda-set-property (property value)
    "Set a property for the current headline."
    (interactive "sproperty: \nsvalue: \n")
    (org-agenda-check-no-diary)
    (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                         (org-agenda-error)))
           (buffer (marker-buffer hdmarker))
           (pos (marker-position hdmarker))
           (inhibit-read-only t))
      (org-with-remote-undo buffer
        (with-current-buffer buffer
          (widen)
          (goto-char pos)
          (org-fold-show-context 'agenda)
          (funcall-interactively 'org-set-property property value)))))


  (defun deheras/org-agenda-process-inbox-bookmark ()
    "Create bookmark from inbox item."
    (interactive)
    (org-agenda-open-link)
    (let* ((title (read-string "Title: "))
           (description (read-string "Description: "))
           (type-options '("text" "audio" "video" "site"))
           (type (completing-read "Media type: " type-options))
           (link (call-interactively 'deheras/org-agenda-copy-link))
           (slug (deheras/org-get-bookmark-title-slug title))
           path
           (cmd (format "wkhtmltopdf -n \"%s\" \"%s\"" link path)))
      (org-with-wide-buffer
       (deheras/org-agenda-set-property "BM_TITLE" title)
       (deheras/org-agenda-set-property "BM_MEDIA_TYPE" type)
       (deheras/org-agenda-set-property "BM_DESCRIPTION" description)
       (deheras/org-agenda-set-property "BM_URL" link)
       (deheras/org-agenda-set-property "BM_DATE_ADDED" (format-time-string "[%Y-%m-%d %a %H:%M]"))
       (when (equal "text" type-options)
         (with-current-buffer (compile cmd)
           (add-hook
            'compilation-finish-functions
            (lambda (buf status)
              (if (equal status "finished\n")
                  (progn
                    (delete-windows-on buf)
                    (bury-buffer buf)
                    (message (concat "Successfully saved to " path)))
                (user-error (concat "Failed to save " path))))
            nil
            'local))
         (setq path (concat (file-truename "~/Documents/literature/articles/") slug "-" (format-time-string "%Y%m%d%H%M%S") ".pdf"))
         (deheras/org-agenda-set-property "BM_FILE" (concat "file:" path)))
       (org-agenda-set-tags)
       (org-agenda-refile nil `("bookmarks.org" ,(concat org-directory "bookmarks.org") nil) t))))

  (defun deheras/org-agenda-process-inbox-gtd-todo ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     (org-agenda-todo "TODO")
     (org-agenda-priority)
     (call-interactively 'org-agenda-set-effort)
     (org-agenda-set-tags)
     (org-agenda-refile nil nil t)))

  (defun deheras/org-agenda-process-inbox-gtd-scheduled-todo ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     (org-agenda-todo "TODO")
     (org-agenda-priority)
     (org-agenda-schedule nil)
     (call-interactively 'org-agenda-set-effort)
     (org-agenda-set-tags)
     (org-agenda-refile nil nil t)))

  (defun deheras/org-agenda-process-inbox-gtd-deadline-todo ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     (org-agenda-todo "TODO")
     (org-agenda-priority)
     (org-agenda-deadline nil)
     (call-interactively 'org-agenda-set-effort)
     (org-agenda-set-tags)
     (org-agenda-refile nil nil t)))

  (defun deheras/org-agenda-process-inbox-gtd-idea ()
    "Process a project inbox entry."
    (interactive)
    (org-with-wide-buffer
     (org-agenda-todo "IDEA")
     (org-agenda-priority ?D)
     (org-agenda-set-tags)
     (org-agenda-refile nil `("projects.org" ,(concat org-directory "gtd/projects.org") nil) t)))

  (map! :map org-agenda-mode-map
        :localleader

        (:prefix ("i" . "inbox")
         :desc "bookmark"
         :mn "b" #'deheras/org-agenda-process-inbox-bookmark)

        (:prefix ("ig" . "gtd")
         :desc "gtd todo"
         :mn "t" #'deheras/org-agenda-process-inbox-gtd-todo)

        (:prefix ("ig" . "gtd")
         :desc "gtd scheduled todo"
         :mn "s" #'deheras/org-agenda-process-inbox-gtd-scheduled-todo)

        (:prefix ("ig" . "gtd")
         :desc "gtd deadline todo"
         :mn "d" #'deheras/org-agenda-process-inbox-gtd-deadline-todo)

        (:prefix ("ig" . "gtd")
         :desc "gtd idea"
         :mn "i" #'deheras/org-agenda-process-inbox-gtd-idea))

  (defun deheras/skip-projects ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ;; ((deheras/is-project-p)
         ;;  next-headline)
         (t
          nil)))))

  ;; https://stackoverflow.com/questions/22394394/orgmode-a-report-of-tasks-that-are-done-within-the-week
  (setq deheras/org-agenda-review-settings
        '((org-agenda-files `(,(concat org-agenda-files "projects.org")
                              ,(concat org-agenda-files "next.org")))
          (org-agenda-show-all-dates t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          ;; (org-agenda-archives-mode t)
          )
        )

  ;; Habit settings
  (setq org-habit-graph-column 60)

  ;; Todo settings
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
          (sequence "IDEA(i)" "PLANNING(p)" "ACTIVE(a)" "|")))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "NEXT" "WAITING" "SOMEDAY" "|" "DONE" "DELEGATED" "CANCELLED")))
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")

  ;; Custom commands
  (setq org-agenda-custom-commands
        `(
          ("d" "Default agenda"
           ((agenda ""
                    ((org-agenda-span 7)
                     (org-agenda-start-day "-0d")
                     (org-deadline-warning-days 90)))
            (tags "inbox"
                     ((org-agenda-overriding-header "Inbox")
                      (org-agenda-files `(,(expand-file-name "inbox/" org-directory)))))
            (todo "NEXT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-files `(,(expand-file-name "gtd/projects.org" org-directory)))))
            (todo "TODO"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files `(,(expand-file-name "gtd/projects.org" org-directory)))
                   (org-agenda-sorting-strategy '(priority-down))
                   (org-agenda-skip-function #'deheras/skip-projects)))
            (todo "TODO"
                  ((org-agenda-overriding-header "One-off Tasks")
                   (org-agenda-files `(,(expand-file-name "gtd/next.org" org-directory)))))
            ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))
            (todo "WAITING"
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-files `(,(expand-file-name "gtd/projects.org" org-directory)))))
            ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))
            ))
          ("rw" "Weekly review"
           agenda ""
           (
            ;; (org-agenda-files `(,(expand-file-name "gtd/projects.org" org-directory)))
            ;; (org-agenda-log-mode t)
            (org-agenda-start-with-log-mode t)
            ;; (org-agenda-clockreport-mode t)
            (org-agenda-start-with-clockreport-mode t)
            (org-agenda-log-mode-items '(clock closed))
            (org-agenda-show-all-dates t)
            (org-agenda-overriding-header "Week in review")
            (org-agenda-span 'week)
            (org-agenda-start-on-weekday 0)
            )
           )))

  ;; Weekly review
  ;; (add-to-list org-agenda-custom-commands
  ;;              `(("rw" "Weekly review"
  ;;                 ((agenda ""
  ;;                          ,(append
  ;;                            deheras/org-agenda-review-settings
  ;;                            '((org-agenda-span 'week)
  ;;                              (org-agenda-start-on-weekday 0)
  ;;                              (org-agenda-overriding-header "Week in review"))
  ;;                            )
  ;;                          )
  ;;                  )
  ;;                 )
  ;;                )
  ;;              )

  ;; Capture templates
  (setq org-capture-templates
        `(("i" "Inbox" entry (file "inbox/{{ .chezmoi.hostname }}.org")
           ,(concat "* %?\n"
                    "/Entered from {{ .chezmoi.hostname }} on/ %U"))
          ("c" "With context" entry (file "inbox/{{ .chezmoi.hostname }}.org")
           ,(concat "* %?\n"
                    "/Entered from {{ .chezmoi.hostname }} on/ %U\n"
                    "  %i\n"
                    "%a"))))
  ;; ("t" "Todo" entry (file+headline "~/Documents/org/capture.org" "Tasks")
  ;;  "* TODO %?\n  :DATE_CAPTURED: %U\n  %a" :empty-lines 1))))

  ;; Org Roam
  (setq org-roam-directory (concat org-directory "roam/"))

  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  (setq display-line-numbers-type 'relative)

  ;; Added [2022-02-04 Fri] to address https://github.com/hlissner/doom-emacs/issues/5714
  (add-hook! 'org-capture-after-finalize-hook (org-element-cache-reset t))
  (defadvice! dan/+org--restart-mode-h-careful-restart (fn &rest args)
    :around #'+org--restart-mode-h
    (let ((old-org-capture-current-plist (and (bound-and-true-p org-capture-mode)
                                              (bound-and-true-p org-capture-current-plist))))
      (apply fn args)
      (when old-org-capture-current-plist
        (setq-local org-capture-current-plist old-org-capture-current-plist)
        (org-capture-mode +1))))

  ;; Tags
  (setq org-tag-alist '(
                        (:startgrouptag)
                        ("lang")
                        (:grouptags)
                        ("python")
                        ("r")
                        ("bash")
                        ("awk")
                        ("elisp")
                        ("hcl")
                        (:endgrouptag)
                        ))
  )


(after! org-fancy-priorities
  (setq org-fancy-priorities-list '((?A . "❗")
                                    (?B . "⬆")
                                    (?C . "⬇")
                                    (?D . "☕"))))


;; LSP mode config
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\research\\'"))

;; Debugger config
(after! dap-mode

  ;; For python
  (setq dap-python-debugger 'debugpy))

  ;; General
  ;; Open hydra buffer when breakpoint hit
  ;; (add-hook 'dap-stopped-hook
  ;;           (lambda (arg) (call-interactively #'dap-hydra)))

;; Keybindings
;; Taken from https://docs.doomemacs.org/latest/modules/tools/debugger/#keybindings,code-1
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug
      :desc "dap repl"          "t" #'dap-ui-repl

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

;; (use-package xterm-color
;;   :ensure t
;;   :init
;;   (setq comint-output-filter-functions
;;         (remove 'ansi-color-process-output comint-output-filter-functions))
;;   (add-hook 'shell-mode-hook
;;             (lambda ()
;;               (add-hook 'comint-preoutput-filter-functions
;;                         'xterm-color-filter nil t))))

(after! nov
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

;; Vterm
(after! vterm
  vterm-always-compile-module t)

(defun deheras/multi-vterm-named (name)
  "Create new multi-vterm buffer with user-defined name"
  (interactive "sVterm buffer name: ")
  (require 'multi-vterm)
  (command-execute 'multi-vterm)
  (rename-buffer (concat "*vterminal:" name "*")))
(map! :leader
      :prefix ("o" . "open")
      :desc "New named multi-vterm terminal" "v" #'deheras/multi-vterm-named)

(after! doom-modeline
  ;; Scaling adjustments to help avoid cutting off so much of the
  ;; right side
  (setq all-the-icons-scale-factor 1.0)
  (custom-set-faces!
    '(model-line :family "Source Code Pro" :size 10)
    '(model-line-inactive :family "Source Code Pro" :size 10)))

(after! company
  (setq company-idle-delay 1.0))

(setq +notmuch-home-function (lambda () (notmuch-search "tag:inbox")))
(setq +notmuch-sync-backend (concat "cd " +notmuch-mail-folder " && notmuch new"))

;; Patch for geiser regression (2022-10-01)
;; https://github.com/emacsmirror/geiser/blob/486c39cfbdf1789fe493535b7e0ae72ff518e53e/elisp/geiser-repl.el
(define-obsolete-function-alias 'run-geiser 'geiser "Geiser 0.26")

;; docker stuff
(after! docker
  ;; Associate Containerfile as Dockerfile
  (add-to-list 'auto-mode-alist '("/Containerfile\\(?:\\.[^/\\]*\\)?\\'" . dockerfile-mode)))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
