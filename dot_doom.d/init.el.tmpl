;;; $DOOMDIR/init.el -*- mode: emacs-lisp; lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input

       :completion
       company
       (vertico +icons +orderless)

       :ui
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       (treemacs +lsp)
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +numbers)
       workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)
       file-templates    ; auto-snippets for empty files
       fold
       (format +onsave)
       snippets

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell
       shell             ; simple shell REPL for Emacs
       vterm

       :checkers
       syntax

       :tools
       (debugger +lsp)
       direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       (lsp +eglot)
       magit
       ;;make              ; run make tasks from Emacs
       pdf               ; pdf enhancements
       terraform
       tmux
       tree-sitter

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       emacs-lisp
       (json +tree-sitter)
       (markdown +grip)
       nix
       (org +journal +pomodoro +roam2 +noter)
       (python +lsp +poetry +tree-sitter)
       rst               ; ReST in peace
       (sh +tree-sitter)
       (web +tree-sitter)
       yaml
       {{- if eq .hostowner "personal" }}
       (racket +lsp)
       (scheme +guile)
       {{- else if eq .hostowner "work" }}
       (ess +lsp)
       {{- end }}

       :email
       (notmuch +org)

       :app
       {{- if eq .hostowner "personal" }}
       (rss +org)
       irc
       {{- end }}

       :config
       ;;literate
       (default +bindings +smartparens))

(after! comp
  ;; HACK Disable native-compilation for some troublesome packages
  (mapc (doom-partial #'add-to-list 'native-comp-deferred-compilation-deny-list)
        (list "/emacs-jupyter.*\\.el\\'"
              "/evil-collection-vterm\\.el\\'"
              "/vterm\\.el\\'"
              "/multi-vterm\\.el\\'"
              "/with-editor\\.el\\'")))
